import json
import os
from datetime import datetime
from src.config import MODEL_NAME
from src.local_model import LocalModel
from src.prompt_manager import PromptManager


def get_timestamp():
    return datetime.now().strftime("%Y-%m-%d %H:%M:%S")


def load_test_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ forTest.json"""
    try:
        with open("data/forTest.json", "r", encoding="utf-8") as f:
            return json.load(f)
    except FileNotFoundError:
        print(f"[{get_timestamp()}] ‚ùå –§–∞–π–ª data/forTest.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return None
    except json.JSONDecodeError as e:
        print(f"[{get_timestamp()}] ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
        return None


def load_view_test_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        with open("data/viewTest.json", "r", encoding="utf-8") as f:
            return json.load(f)
    except FileNotFoundError:
        return {"models": {}}
    except json.JSONDecodeError:
        return {"models": {}}


def save_view_test_data(data):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ viewTest.json"""
    os.makedirs("data", exist_ok=True)
    with open("data/viewTest.json", "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)


def test_model():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –º–æ–¥–µ–ª—å –Ω–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ forTest.json"""
    print(f"[{get_timestamp()}] üöÄ –ù–∞—á–∏–Ω–∞—é —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏: {MODEL_NAME}")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_data = load_test_data()
    if not test_data:
        return

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    view_test_data = load_view_test_data()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å –∏ –ø—Ä–æ–º–ø—Ç –º–µ–Ω–µ–¥–∂–µ—Ä
    model = LocalModel()
    prompt_manager = PromptManager()

    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –º–æ–¥–µ–ª–∏ –¥–ª—è –∫–ª—é—á–∞
    model_key = MODEL_NAME.split("/")[-1].replace(".gguf", "")

    # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —ç—Ç–æ–π –º–æ–¥–µ–ª–∏
    model_results = {
        "model_name": MODEL_NAME,
        "tested_at": get_timestamp(),
        "results": [],
    }

    print(
        f"[{get_timestamp()}] üìä –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é {len(test_data['data'])} —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π..."
    )

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ
    for i, event in enumerate(test_data["data"], 1):
        print(
            f"[{get_timestamp()}] üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å–æ–±—ã—Ç–∏–µ {i}/{len(test_data['data'])} (ID: {event['id']})"
        )

        try:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–º–ø—Ç
            prompt = prompt_manager.prepare_prompt(event["initialText"])

            # –ó–∞—Å–µ–∫–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            start_time = datetime.now()
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏
            response = model.generate_structured_response(prompt, MODEL_NAME)
            
            # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            processing_time = (datetime.now() - start_time).total_seconds()

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result = {
                "event_id": event["id"],
                "input_text": event["initialText"],
                "output_json": response,
                "processing_time_seconds": processing_time,
                "processed_at": get_timestamp(),
            }

            model_results["results"].append(result)

            print(f"[{get_timestamp()}] ‚úÖ –°–æ–±—ã—Ç–∏–µ {event['id']} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ")

        except Exception as e:
            print(
                f"[{get_timestamp()}] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–±—ã—Ç–∏—è {event['id']}: {str(e)}"
            )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—à–∏–±–∫—É
            result = {
                "event_id": event["id"],
                "input_text": event["initialText"],
                "error": str(e),
                "processing_time_seconds": None,
                "processed_at": get_timestamp(),
            }

            model_results["results"].append(result)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è —ç—Ç–æ–π –º–æ–¥–µ–ª–∏ (–ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –µ—Å–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
    view_test_data["models"][model_key] = model_results

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    save_view_test_data(view_test_data)

    print(
        f"[{get_timestamp()}] ‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ data/viewTest.json"
    )
    print(f"[{get_timestamp()}] üìà –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–±—ã—Ç–∏–π: {len(model_results['results'])}")


if __name__ == "__main__":
    test_model()
