import json
import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns
from datetime import datetime
import numpy as np

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä—É—Å—Å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
plt.rcParams['font.family'] = ['DejaVu Sans', 'Arial Unicode MS', 'SimHei']
plt.rcParams['axes.unicode_minus'] = False

def load_view_test_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ viewTest.json"""
    try:
        with open('data/viewTest.json', 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        print("‚ùå –§–∞–π–ª data/viewTest.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return None
    except json.JSONDecodeError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
        return None

def prepare_data_for_analysis(data):
    """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
    results = []
    
    for model_name, model_data in data['models'].items():
        for result in model_data['results']:
            row = {
                'model_name': model_name,
                'event_id': result['event_id'],
                'has_error': 'error' in result,
                'processing_time': result.get('processing_time_seconds'),
                'tested_at': model_data['tested_at']
            }
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            if 'output_json' in result:
                output = result['output_json'].get('data', {})
                row.update({
                    'event_title': output.get('eventTitle', ''),
                    'event_categories': output.get('eventCategories', []),
                    'event_themes': output.get('eventThemes', []),
                    'event_price': output.get('eventPrice', [0])[0] if output.get('eventPrice') else 0,
                    'event_age_limit': output.get('eventAgeLimit', ''),
                    'has_location': bool(output.get('eventLocation', {}).get('name')),
                    'has_link': bool(output.get('linkSource')),
                    'date_parsed': bool(output.get('eventDate'))
                })
            else:
                row.update({
                    'event_title': '',
                    'event_categories': [],
                    'event_themes': [],
                    'event_price': 0,
                    'event_age_limit': '',
                    'has_location': False,
                    'has_link': False,
                    'date_parsed': False
                })
            
            results.append(row)
    
    return pd.DataFrame(results)

def create_performance_comparison(df):
    """–°–æ–∑–¥–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–µ–π"""
    plt.figure(figsize=(12, 8))
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –º–æ–¥–µ–ª–∏ –∏ –≤—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    model_stats = df.groupby('model_name').agg({
        'processing_time': ['mean', 'std', 'count'],
        'has_error': 'sum'
    }).round(2)
    
    model_stats.columns = ['avg_time', 'std_time', 'total_events', 'errors']
    model_stats['success_rate'] = ((model_stats['total_events'] - model_stats['errors']) / model_stats['total_events'] * 100).round(1)
    
    # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
    fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(14, 10))
    
    # –ì—Ä–∞—Ñ–∏–∫ –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    colors = plt.cm.Set3(np.linspace(0, 1, len(model_stats)))
    bars1 = ax1.bar(range(len(model_stats)), model_stats['avg_time'], 
                    yerr=model_stats['std_time'], capsize=5, color=colors, alpha=0.7)
    ax1.set_title('–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π –ø–æ –º–æ–¥–µ–ª—è–º', fontsize=14, fontweight='bold')
    ax1.set_ylabel('–í—Ä–µ–º—è (—Å–µ–∫—É–Ω–¥—ã)')
    ax1.set_xticks(range(len(model_stats)))
    ax1.set_xticklabels(model_stats.index, rotation=45, ha='right')
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã
    for i, bar in enumerate(bars1):
        height = bar.get_height()
        ax1.text(bar.get_x() + bar.get_width()/2., height + 0.1,
                f'{height:.1f}s', ha='center', va='bottom', fontweight='bold')
    
    # –ì—Ä–∞—Ñ–∏–∫ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
    bars2 = ax2.bar(range(len(model_stats)), model_stats['success_rate'], 
                    color=colors, alpha=0.7)
    ax2.set_title('–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç–æ–∫ –ø–æ –º–æ–¥–µ–ª—è–º', fontsize=14, fontweight='bold')
    ax2.set_ylabel('–£—Å–ø–µ—à–Ω–æ—Å—Ç—å (%)')
    ax2.set_xticks(range(len(model_stats)))
    ax2.set_xticklabels(model_stats.index, rotation=45, ha='right')
    ax2.set_ylim(0, 100)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã
    for i, bar in enumerate(bars2):
        height = bar.get_height()
        ax2.text(bar.get_x() + bar.get_width()/2., height + 1,
                f'{height:.1f}%', ha='center', va='bottom', fontweight='bold')
    
    plt.tight_layout()
    plt.savefig('data/model_performance_comparison.png', dpi=300, bbox_inches='tight')
    plt.show()
    
    return model_stats

def create_error_analysis(df):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ—à–∏–±–∫–∏ –ø–æ –º–æ–¥–µ–ª—è–º"""
    error_data = df[df['has_error'] == True]
    
    if error_data.empty:
        print("‚úÖ –û—à–∏–±–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return
    
    plt.figure(figsize=(12, 6))
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ –ø–æ –º–æ–¥–µ–ª—è–º
    error_counts = error_data['model_name'].value_counts()
    
    colors = plt.cm.Reds(np.linspace(0.3, 0.8, len(error_counts)))
    bars = plt.bar(range(len(error_counts)), error_counts.values, color=colors, alpha=0.7)
    
    plt.title('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫ –ø–æ –º–æ–¥–µ–ª—è–º', fontsize=14, fontweight='bold')
    plt.ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫')
    plt.xticks(range(len(error_counts)), error_counts.index, rotation=45, ha='right')
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã
    for i, bar in enumerate(bars):
        height = bar.get_height()
        plt.text(bar.get_x() + bar.get_width()/2., height + 0.1,
                str(int(height)), ha='center', va='bottom', fontweight='bold')
    
    plt.tight_layout()
    plt.savefig('data/error_analysis.png', dpi=300, bbox_inches='tight')
    plt.show()

def create_quality_analysis(df):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
    successful_data = df[df['has_error'] == False]
    
    if successful_data.empty:
        print("‚ùå –ù–µ—Ç —É—Å–ø–µ—à–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–∞—á–µ—Å—Ç–≤–∞")
        return
    
    # –°–æ–∑–¥–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
    quality_metrics = successful_data.groupby('model_name').agg({
        'has_location': 'mean',
        'has_link': 'mean',
        'date_parsed': 'mean',
        'event_categories': lambda x: x.apply(lambda cats: len(cats) > 0).mean(),
        'event_themes': lambda x: x.apply(lambda themes: len(themes) > 0).mean()
    }).round(3) * 100
    
    quality_metrics.columns = ['–õ–æ–∫–∞—Ü–∏—è', '–°—Å—ã–ª–∫–∞', '–î–∞—Ç–∞', '–ö–∞—Ç–µ–≥–æ—Ä–∏–∏', '–¢–µ–º—ã']
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ–ø–ª–æ–≤—É—é –∫–∞—Ä—Ç—É
    plt.figure(figsize=(12, 8))
    sns.heatmap(quality_metrics.T, annot=True, fmt='.1f', cmap='RdYlGn', 
                cbar_kws={'label': '–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ (%)'})
    plt.title('–ö–∞—á–µ—Å—Ç–≤–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ –º–æ–¥–µ–ª—è–º', fontsize=14, fontweight='bold')
    plt.ylabel('–¢–∏–ø –¥–∞–Ω–Ω—ã—Ö')
    plt.xlabel('–ú–æ–¥–µ–ª—å')
    plt.xticks(rotation=45, ha='right')
    plt.tight_layout()
    plt.savefig('data/quality_analysis.png', dpi=300, bbox_inches='tight')
    plt.show()
    
    return quality_metrics

def create_time_distribution(df):
    """–°–æ–∑–¥–∞–µ—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    successful_data = df[df['has_error'] == False]
    
    if successful_data.empty:
        print("‚ùå –ù–µ—Ç —É—Å–ø–µ—à–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤—Ä–µ–º–µ–Ω–∏")
        return
    
    plt.figure(figsize=(12, 6))
    
    # –°–æ–∑–¥–∞–µ–º box plot
    models = successful_data['model_name'].unique()
    data_to_plot = [successful_data[successful_data['model_name'] == model]['processing_time'].dropna() 
                   for model in models]
    
    plt.boxplot(data_to_plot, labels=models)
    plt.title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ –º–æ–¥–µ–ª—è–º', fontsize=14, fontweight='bold')
    plt.ylabel('–í—Ä–µ–º—è (—Å–µ–∫—É–Ω–¥—ã)')
    plt.xticks(rotation=45, ha='right')
    plt.grid(True, alpha=0.3)
    plt.tight_layout()
    plt.savefig('data/time_distribution.png', dpi=300, bbox_inches='tight')
    plt.show()

def print_summary_statistics(df, model_stats, quality_metrics):
    """–í—ã–≤–æ–¥–∏—Ç —Å–≤–æ–¥–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    print("\n" + "="*80)
    print("üìä –°–í–û–î–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ú–û–î–ï–õ–ï–ô")
    print("="*80)
    
    print(f"\nüìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"   ‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ –º–æ–¥–µ–ª–µ–π: {len(df['model_name'].unique())}")
    print(f"   ‚Ä¢ –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–±—ã—Ç–∏–π: {len(df)}")
    print(f"   ‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç–æ–∫: {len(df[df['has_error'] == False])}")
    print(f"   ‚Ä¢ –û—à–∏–±–æ–∫: {len(df[df['has_error'] == True])}")
    print(f"   ‚Ä¢ –û–±—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(len(df[df['has_error'] == False]) / len(df) * 100):.1f}%")
    
    print(f"\nüèÜ –õ—É—á—à–∏–µ –º–æ–¥–µ–ª–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏:")
    fastest_models = model_stats.nsmallest(3, 'avg_time')
    for i, (model, stats) in enumerate(fastest_models.iterrows(), 1):
        print(f"   {i}. {model}: {stats['avg_time']:.2f}s ¬± {stats['std_time']:.2f}s")
    
    print(f"\nüéØ –õ—É—á—à–∏–µ –º–æ–¥–µ–ª–∏ –ø–æ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏:")
    best_models = model_stats.nlargest(3, 'success_rate')
    for i, (model, stats) in enumerate(best_models.iterrows(), 1):
        print(f"   {i}. {model}: {stats['success_rate']:.1f}% ({stats['total_events'] - stats['errors']}/{stats['total_events']})")
    
    if quality_metrics is not None:
        print(f"\nüìã –°—Ä–µ–¥–Ω–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ –ø–∞—Ä—Å–∏–Ω–≥–∞:")
        avg_quality = quality_metrics.mean()
        for metric, value in avg_quality.items():
            print(f"   ‚Ä¢ {metric}: {value:.1f}%")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–µ–π...")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    data = load_view_test_data()
    if data is None:
        return
    
    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è {len(data['models'])} –º–æ–¥–µ–ª–µ–π")
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    df = prepare_data_for_analysis(data)
    print(f"üìä –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ {len(df)} –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
    
    # –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
    print("\nüìà –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤...")
    
    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    model_stats = create_performance_comparison(df)
    
    # –ê–Ω–∞–ª–∏–∑ –æ—à–∏–±–æ–∫
    create_error_analysis(df)
    
    # –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞
    quality_metrics = create_quality_analysis(df)
    
    # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
    create_time_distribution(df)
    
    # –í—ã–≤–æ–¥–∏–º —Å–≤–æ–¥–∫—É
    print_summary_statistics(df, model_stats, quality_metrics)
    
    print(f"\n‚úÖ –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ì—Ä–∞—Ñ–∏–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫–µ data/")
    print(f"   ‚Ä¢ model_performance_comparison.png")
    print(f"   ‚Ä¢ error_analysis.png") 
    print(f"   ‚Ä¢ quality_analysis.png")
    print(f"   ‚Ä¢ time_distribution.png")

if __name__ == "__main__":
    main()
