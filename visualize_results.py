import json
import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns
from datetime import datetime
import numpy as np
import base64
from io import BytesIO

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä—É—Å—Å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
plt.rcParams["font.family"] = ["DejaVu Sans", "Arial Unicode MS", "SimHei"]
plt.rcParams["axes.unicode_minus"] = False


def load_view_test_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ viewTest.json"""
    try:
        with open("data/viewTest.json", "r", encoding="utf-8") as f:
            return json.load(f)
    except FileNotFoundError:
        print("‚ùå –§–∞–π–ª data/viewTest.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return None
    except json.JSONDecodeError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
        return None


def create_time_chart(df):
    """–°–æ–∑–¥–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫ –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç base64 —Å—Ç—Ä–æ–∫—É"""
    successful_data = df[df["has_error"] == False]
    
    if successful_data.empty:
        return None
    
    plt.figure(figsize=(12, 6))
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –º–æ–¥–µ–ª–∏ –∏ –≤—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    model_stats = successful_data.groupby("model_name").agg({
        "processing_time": ["mean", "std", "count"]
    }).round(2)
    
    model_stats.columns = ["avg_time", "std_time", "count"]
    
    # –°–æ–∑–¥–∞–µ–º bar chart
    colors = plt.cm.Set3(np.linspace(0, 1, len(model_stats)))
    bars = plt.bar(range(len(model_stats)), model_stats["avg_time"], 
                   yerr=model_stats["std_time"], capsize=5, color=colors, alpha=0.7)
    
    plt.title("–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π –ø–æ –º–æ–¥–µ–ª—è–º", fontsize=14, fontweight="bold")
    plt.ylabel("–í—Ä–µ–º—è (—Å–µ–∫—É–Ω–¥—ã)")
    plt.xlabel("–ú–æ–¥–µ–ª—å")
    plt.xticks(range(len(model_stats)), model_stats.index, rotation=45, ha="right")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã
    for i, bar in enumerate(bars):
        height = bar.get_height()
        plt.text(bar.get_x() + bar.get_width()/2., height + 0.1,
                f'{height:.1f}s', ha='center', va='bottom', fontweight='bold')
    
    plt.tight_layout()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –≤ base64
    buffer = BytesIO()
    plt.savefig(buffer, format='png', dpi=300, bbox_inches='tight')
    buffer.seek(0)
    image_base64 = base64.b64encode(buffer.getvalue()).decode()
    plt.close()
    
    return image_base64


def create_html_report(data):
    """–°–æ–∑–¥–∞–µ—Ç HTML –æ—Ç—á–µ—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    results = []
    for model_name, model_data in data["models"].items():
        for result in model_data["results"]:
            row = {
                "model_name": model_name,
                "event_id": result["event_id"],
                "input_text": result["input_text"],
                "has_error": "error" in result,
                "processing_time": result.get("processing_time_seconds"),
                "tested_at": model_data["tested_at"]
            }
            
            if "output_json" in result:
                output = result["output_json"].get("data", {})
                row["output_text"] = json.dumps(output, ensure_ascii=False, indent=2)
                row["error"] = None
            else:
                row["output_text"] = ""
                row["error"] = result.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
            
            results.append(row)
    
    df = pd.DataFrame(results)
    
    # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ –≤—Ä–µ–º–µ–Ω–∏
    time_chart_base64 = create_time_chart(df)
    
    # –°–æ–∑–¥–∞–µ–º HTML —Ç–∞–±–ª–∏—Ü—É
    html_content = """
    <!DOCTYPE html>
    <html lang="ru">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–µ–π</title>
        <style>
            body {{
                font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                margin: 0;
                padding: 20px;
                background-color: #f5f5f5;
            }}
            .container {{
                max-width: 1400px;
                margin: 0 auto;
                background-color: white;
                border-radius: 10px;
                box-shadow: 0 2px 10px rgba(0,0,0,0.1);
                overflow: hidden;
            }}
            .header {{
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                color: white;
                padding: 30px;
                text-align: center;
            }}
            .header h1 {{
                margin: 0;
                font-size: 2.5em;
                font-weight: 300;
            }}
            .header p {{
                margin: 10px 0 0 0;
                opacity: 0.9;
                font-size: 1.1em;
            }}
            .stats {{
                display: grid;
                grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
                gap: 20px;
                padding: 30px;
                background-color: #f8f9fa;
            }}
            .stat-card {{
                background: white;
                padding: 20px;
                border-radius: 8px;
                text-align: center;
                box-shadow: 0 2px 5px rgba(0,0,0,0.1);
            }}
            .stat-number {{
                font-size: 2em;
                font-weight: bold;
                color: #667eea;
            }}
            .stat-label {{
                color: #666;
                margin-top: 5px;
            }}
            .chart-section {{
                padding: 30px;
                text-align: center;
            }}
            .chart-section h2 {{
                color: #333;
                margin-bottom: 20px;
            }}
            .chart-section img {{
                max-width: 100%;
                height: auto;
                border-radius: 8px;
                box-shadow: 0 4px 15px rgba(0,0,0,0.1);
            }}
            .table-section {{
                padding: 30px;
            }}
            .table-section h2 {{
                color: #333;
                margin-bottom: 20px;
            }}
            .results-table {{
                width: 100%;
                border-collapse: collapse;
                background: white;
                border-radius: 8px;
                overflow: hidden;
                box-shadow: 0 4px 15px rgba(0,0,0,0.1);
            }}
            .results-table th {{
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                color: white;
                padding: 15px;
                text-align: left;
                font-weight: 500;
            }}
            .results-table td {{
                padding: 15px;
                border-bottom: 1px solid #eee;
                vertical-align: top;
            }}
            .results-table tr:hover {{
                background-color: #f8f9fa;
            }}
            .model-name {{
                font-weight: bold;
                color: #667eea;
            }}
            .event-id {{
                font-weight: bold;
                color: #333;
            }}
            .input-text {{
                max-width: 300px;
                word-wrap: break-word;
                font-size: 0.9em;
                line-height: 1.4;
            }}
            .output-text {{
                max-width: 400px;
                word-wrap: break-word;
                font-size: 0.8em;
                line-height: 1.3;
                background-color: #f8f9fa;
                padding: 10px;
                border-radius: 4px;
                border-left: 4px solid #28a745;
            }}
            .error-text {{
                color: #dc3545;
                font-weight: bold;
                background-color: #f8d7da;
                padding: 10px;
                border-radius: 4px;
                border-left: 4px solid #dc3545;
            }}
            .processing-time {{
                font-weight: bold;
                color: #28a745;
            }}
            .success {{
                color: #28a745;
                font-weight: bold;
            }}
            .error {{
                color: #dc3545;
                font-weight: bold;
            }}
            .timestamp {{
                font-size: 0.8em;
                color: #666;
            }}
        </style>
    </head>
    <body>
        <div class="container">
            <div class="header">
                <h1>üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–µ–π</h1>
                <p>–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –∫–∞—á–µ—Å—Ç–≤–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–±—ã—Ç–∏–π</p>
            </div>
            
            <div class="stats">
                <div class="stat-card">
                    <div class="stat-number">""" + str(len(data['models'])) + """</div>
                    <div class="stat-label">–ú–æ–¥–µ–ª–µ–π –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number">""" + str(len(results)) + """</div>
                    <div class="stat-label">–°–æ–±—ã—Ç–∏–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number">""" + str(len([r for r in results if not r['has_error']])) + """</div>
                    <div class="stat-label">–£—Å–ø–µ—à–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç–æ–∫</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number">""" + str(len([r for r in results if r['has_error']])) + """</div>
                    <div class="stat-label">–û—à–∏–±–æ–∫</div>
                </div>
            </div>
            
            <div class="chart-section">
                <h2>‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ –º–æ–¥–µ–ª—è–º</h2>
                <img src="data:image/png;base64,""" + (time_chart_base64 or '') + """" alt="–ì—Ä–∞—Ñ–∏–∫ –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏">
            </div>
            
            <div class="table-section">
                <h2>üìã –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã</h2>
                <table class="results-table">
                    <thead>
                        <tr>
                            <th>–ú–æ–¥–µ–ª—å</th>
                            <th>ID —Å–æ–±—ã—Ç–∏—è</th>
                            <th>–í—Ö–æ–¥–Ω–æ–π —Ç–µ–∫—Å—Ç</th>
                            <th>–†–µ–∑—É–ª—å—Ç–∞—Ç</th>
                            <th>–í—Ä–µ–º—è (—Å)</th>
                            <th>–°—Ç–∞—Ç—É—Å</th>
                            <th>–î–∞—Ç–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</th>
                        </tr>
                    </thead>
                    <tbody>
    """
    
    for result in results:
        status_class = "success" if not result["has_error"] else "error"
        status_text = "‚úÖ –£—Å–ø–µ—Ö" if not result["has_error"] else "‚ùå –û—à–∏–±–∫–∞"
        
        html_content += """
                        <tr>
                            <td class="model-name">""" + result['model_name'] + """</td>
                            <td class="event-id">""" + str(result['event_id']) + """</td>
                            <td class="input-text">""" + result['input_text'][:200] + ('...' if len(result['input_text']) > 200 else '') + """</td>
                            <td>
        """
        
        if result["has_error"]:
            html_content += '<div class="error-text">' + result["error"] + '</div>'
        else:
            html_content += '<div class="output-text">' + result["output_text"][:500] + ("..." if len(result["output_text"]) > 500 else "") + '</div>'
        
        html_content += """
                            </td>
                            <td class="processing-time">""" + (f"{result['processing_time']:.2f}" if result['processing_time'] else 'N/A') + """</td>
                            <td class="""" + status_class + """">""" + status_text + """</td>
                            <td class="timestamp">""" + result['tested_at'] + """</td>
                        </tr>
        """
    
    html_content += """
                    </tbody>
                </table>
            </div>
        </div>
    </body>
    </html>
    """
    
    return html_content


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è HTML –æ—Ç—á–µ—Ç–∞"""
    print("üöÄ –°–æ–∑–¥–∞–Ω–∏–µ HTML –æ—Ç—á–µ—Ç–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    data = load_view_test_data()
    if data is None:
        return
    
    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è {len(data['models'])} –º–æ–¥–µ–ª–µ–π")
    
    # –°–æ–∑–¥–∞–µ–º HTML –æ—Ç—á–µ—Ç
    html_content = create_html_report(data)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º HTML —Ñ–∞–π–ª
    with open("data/test_results_report.html", "w", encoding="utf-8") as f:
        f.write(html_content)
    
    print("‚úÖ HTML –æ—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: data/test_results_report.html")
    print("üìä –û—Ç—á–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç:")
    print("   ‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –º–æ–¥–µ–ª—è–º")
    print("   ‚Ä¢ –ì—Ä–∞—Ñ–∏–∫ –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
    print("   ‚Ä¢ –î–µ—Ç–∞–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    print("   ‚Ä¢ –í—Ö–æ–¥–Ω—ã–µ –∏ –≤—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ–±—ã—Ç–∏—è")


if __name__ == "__main__":
    main()
