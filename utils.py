import json
import os

TEST_JSON_PATH = "test.json"

# Наборы допустимых значений
DEPARTMENT_SET = tuple(['1', '10', '11', '12', '14', '16', '17', '18',
                       '19', '20', '3', '4', '5', '6', '7', '9',
                       'АО Кропоткинское', 'АОР', 'Восход', 'Рассвет','Кавказ',
                       'Колхоз Прогресс', 'Мир', 'СП Коломейцево',
                       'Север', 'ТСК', 'Центр', 'Юг'])

OPERATION_SET = tuple(['1-я междурядная культивация', '2-я междурядная культивация',
                      'Боронование довсходовое', 'Внесение минеральных удобрений',
                      'Выравнивание зяби', '2-е Выравнивание зяби',
                      'Гербицидная обработка', '1 Гербицидная обработка',
                      '2 Гербицидная обработка', '3 Гербицидная обработка',
                      '4 Гербицидная обработка', 'Дискование', 'Дискование 2-е', 'Дискование 3-е',
                      'Инсектицидная обработка', 'Культивация', 'Пахота',
                      'Подкормка', '2-я подкормка', 'Предпосевная культивация', 'Прикатывание посевов',
                      'Сев', 'Сплошная культивация', 'Уборка', 'Функицидная обработка',
                      'Чизлевание'])

CROP_SET = tuple(['Вика+Тритикале', 'Горох на зерно', 'Горох товарный', 'Гуар',
                 'Конопля', 'Кориандр', 'Кукуруза кормовая', 'Кукуруза семенная',
                 'Кукуруза товарная', 'Люцерна', 'Многолетние злаковые травы',
                 'Многолетние травы текущего года','Овес', 'Подсолнечник кондитерский',
                 'Подсолнечник семенной','Подсолнечник товарный', 'Просо','Пшеница озимая на зеленый корм',
                 'Пшеница озимая семенная', 'Пшеница озимая товарная', 'Рапс озимый',
                 'Рапс яровой', 'Свекла сахарная', 'Сорго', 'Сорго кормовой',
                 'Сорго-суданковый гибрид', 'Соя семенная', 'Соя товарная',
                 'Чистый пар', 'Чумиза', 'Ячмень озимый', 'Ячмень озимый семенной'])

def load_test_data():
    if not os.path.exists(TEST_JSON_PATH):
        return None
    with open(TEST_JSON_PATH, "r", encoding="utf-8") as f:
        return json.load(f)

def get_event_by_id(event_id, data):
    return next((item for item in data.get("data", []) if item.get("id") == event_id), None)

def validate_field(field_name, value):
    """Проверяет, что значение поля соответствует допустимому набору значений"""
    if field_name == 'department' and value not in DEPARTMENT_SET:
        return False, f"Недопустимое значение подразделения: {value}"
    elif field_name == 'operation' and value not in OPERATION_SET:
        return False, f"Недопустимое значение операции: {value}"
    elif field_name == 'crop' and value not in CROP_SET:
        return False, f"Недопустимое значение культуры: {value}"
    return True, None 