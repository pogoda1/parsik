from datetime import datetime
import json
from typing import List, Dict, Any
from llama_cpp import Llama
import os
import psutil
import GPUtil
from src.config import MODEL_NAME
from src.prompt_manager import PromptManager

def get_timestamp():
    return datetime.now().strftime("%Y-%m-%d %H:%M:%S")

def check_system_info():
    info = []
    info.append(f"CPU –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {psutil.cpu_percent()}%")
    try:
        gpus = GPUtil.getGPUs()
        for gpu in gpus:
            info.append(f"GPU {gpu.name}:")
            info.append(f"- –ó–∞–≥—Ä—É–∑–∫–∞ GPU: {gpu.load*100:.1f}%")
            info.append(f"- –ü–∞–º—è—Ç—å GPU: {gpu.memoryUsed}MB / {gpu.memoryTotal}MB")
    except:
        info.append("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ GPU")
    return "\n".join(info)


class LocalModel:
    def __init__(self):
        self.model = None
        self.loaded_path = None

    def initialize_model(self, model_path: str):
        try:
            self.model = Llama(
                model_path=model_path,
                n_ctx=8192,
                n_gpu_layers=48,
                n_threads=os.cpu_count(),
                n_batch=1024,
                chat_format="chatml",  # –í–ê–ñ–ù–û –¥–ª—è structured output
                verbose=False,
            )
            self.loaded_path = model_path
        except Exception as e:
            print(f"[{get_timestamp()}] üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {str(e)}")
            raise

    def generate_structured_response(self, user_prompt: str, model_path: str, temperature: float = 0.3) -> Dict[str, Any]:
        if not self.model or self.loaded_path != model_path:
            self.initialize_model(model_path)


        try:
            response = self.model.create_chat_completion(
                messages=[
                     {
                    "role": "system",
                    "content": (
                        "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –°–¢–†–û–ì–û JSON. "
                        "–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ç–µ–∫—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è ‚Äî —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π —Å—Ç—Ä—É–∫—Ç—É—Ä—É. "
                        "–ï—Å–ª–∏ –¥–∞—Ç—ã —è–≤–Ω–æ –Ω–µ —É–∫–∞–∑–∞–Ω–∞ –≤ —Ç–µ–∫—Å—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è ‚Äî –≤–µ—Ä–Ω–∏ –æ—à–∏–±–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ {\"errorCode\": 2, \"errorText\": \"DATE_NOT_FOUND\"}. "
                    )
                },
                    {
                        "role": "user",
                        "content": user_prompt
                    }
                ],
                response_format={
                    "type": "json_object",
                    "schema": {
                        "type": "object",
                        "properties": {
                            "data": {
                                "type": "object",
                                "properties": {
                                    "eventTitle": {"type": "string"},
                                    "eventDescription": {"type": "string"},
                                    "eventDate": {
                                        "type": "array",
                                        "items": {
                                            "type": "object",
                                            "properties": {
                                                "from": {"type": "string"},
                                                "to": {"type": "string"},
                                            },
                                            "required": ["from", "to"]
                                        }
                                    },
                                    "eventPrice": {
                                        "type": "array",
                                        "items": {"type": "number"}
                                    },
                                    "eventCategories": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "enum": [
                                                "excursion",
                                                "exhibitions",
                                                "well",
                                                "lecture",
                                                "seminar",
                                                "conference",
                                                "presentation",
                                                "webinar",
                                                "training",
                                                "master_class",
                                                "vorkshop",
                                                "business_game",
                                                "class",
                                                "forum",
                                                "mitap",
                                                "business_breakfast",
                                                "meeting",
                                                "networking",
                                                "mastermind",
                                                "theater",
                                                "movie",
                                                "stand__up",
                                                "concerts",
                                                "party",
                                                "circus",
                                                "festivals",
                                                "show",
                                                "games",
                                                "active_rest",
                                                "olympics",
                                                "battle",
                                                "championship",
                                                "league",
                                                "competition",
                                                "volunteering",
                                                "charity",
                                                "social_initiatives"
                                            ]
                                        },
                                        "minItems": 1
                                    },
                                    "eventThemes": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "enum": [
                                                "culture_and_art",
                                                "science_and_education",
                                                "industry_specialized",
                                                "it_and_the_internet",
                                                "business_and_entrepreneurship",
                                                "visual_creativity_visual_graphics",
                                                "psychology_and_self__knowledge",
                                                "humor",
                                                "music",
                                                "travel_and_tourism",
                                                "cooking_and_gastronomy",
                                                "beauty_and_health",
                                                "sport"
                                            ]
                                        },
                                        "minItems": 1
                                    },  
                                    "eventAgeLimit": {"type": "string"},
                                    "eventLocation": {
                                        "type": "object",
                                        "properties": {
                                            "name": {"type": "string"},
                                            "address": {"type": "string"}
                                        },
                                        "required": ["name", "address"]
                                    },
                                    "linkSource": {"type": "string"}
                                },
                                "required": ["eventTitle", "eventDescription", "eventDate", "eventPrice",
                                             "eventCategories", "eventThemes", "eventAgeLimit",
                                             "eventLocation", "linkSource"]
                            }
                        },
                        "required": ["data"]
                    }
                },
                temperature=temperature,
                max_tokens=800
            )

            raw_text = response["choices"][0]["message"]["content"]
            
            # Clean markdown formatting if present
            if raw_text.startswith("```"):
                raw_text = raw_text.split("\n", 1)[1]  # Remove first line with ```json
                raw_text = raw_text.rsplit("\n", 1)[0]  # Remove last line with ```
            
            try:
                parsed = json.loads(raw_text)
                return parsed
            except json.JSONDecodeError as e:
                print(f"[ERROR] Failed to parse JSON: {str(e)}")
                print(f"[ERROR] Raw text was: {raw_text}")
                raise

        except Exception as e:
            print(f"[{get_timestamp()}] üí• –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ JSON: {str(e)}")
            raise

textAds = "–ò–∑ –ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥–∞ –æ—Ä–≥–∞–Ω–∏–∑—É—é—Ç —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ —ç–∫—Å–∫—É—Ä—Å–∏–∏ –≤ –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–∞—Ä–∫ ¬´–ö—É—Ä—à—Å–∫–∞—è –∫–æ—Å–∞¬ª. –£—á–∞—Å—Ç–Ω–∏–∫–∏ –ø–æ—Å–µ—Ç—è—Ç –∫–ª—é—á–µ–≤—ã–µ –ª–æ–∫–∞—Ü–∏–∏ –∑–∞–ø–æ–≤–µ–¥–Ω–∏–∫–∞, —É—Å–ª—ã—à–∞—Ç, –∫–∞–∫ ¬´–ø–æ—ë—Ç¬ª –ø–µ—Å–æ–∫, –ø–æ–æ–±–µ–¥–∞—é—Ç –≤ —Ç—Ä–∞–∫—Ç–∏—Ä–µ, –∞ –≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–Ω—è –ø–æ—Å–µ—Ç—è—Ç —Å—ã—Ä–æ–≤–∞—Ä–Ω—é –∏ –ø—Ä–æ–≥—É–ª—è—é—Ç—Å—è –ø–æ –ó–µ–ª–µ–Ω–æ–≥—Ä–∞–¥—Å–∫—É. \n\nüëâ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —ç–∫—Å–∫—É—Ä—Å–∏—é (https://dvuhmetrovigid.ru/excursions/?did=0039&utm_source=part&utm_medium=0039&excursion=233)\n\n–¶–µ–Ω–∞ —Å –ø–ª–æ—Ç–Ω—ã–º –æ–±–µ–¥–æ–º 3900 ‚ÇΩ, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å 8 —á–∞—Å–æ–≤.\n\n–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ê–ù–û–ù–°39 (https://t.me/+-cCRoVroPdZiMDYy)"
textEvent = "–ù–∞–∑–≤–∞–Ω–∏–µ: –ï–∫–∞—Ç–µ—Ä–∏–Ω–∞ –Ø—à–Ω–∏–∫–æ–≤–∞ –≤ –ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥–µ. –î–∞—Ç–∞: 27 –∏—é–ª—è (–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ) 20:00 ‚Äì 22:30. –û–ø–∏—Å–∞–Ω–∏–µ: –ï–∫–∞—Ç–µ—Ä–∏–Ω–∞ –Ø—à–Ω–∏–∫–æ–≤–∞ ‚Äì –¥–µ–≤—É—à–∫–∞ —Å –≥–∏—Ç–∞—Ä–æ–π –∏ –æ–≥—Ä–æ–º–Ω—ã–º–∏ –∞–º–±–∏—Ü–∏—è–º–∏. –ü–æ–Ω—è—Ç–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏–∏ –∏ –±–ª–µ—Å—Ç—è—â–µ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–ª—è –ø–æ–ø-—Ä–æ–∫–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫ –¥–µ–ª–∞—é—Ç –∫–∞–∂–¥—É—é –ø–µ—Å–Ω—é –ø—Ä–∏—Ç—è–≥–∞—Ç–µ–ª—å–Ω–æ–π.\n\n–û–Ω–∞ —Å–æ–∑–¥–∞–µ—Ç —Å–µ–±—è —Å–∞–º–∞ ‚Äî –∏ —É –Ω–µ–µ —ç—Ç–æ –ø–æ–ª—É—á–∞–µ—Ç—Å—è. –ú–∏–ª–ª–∏–æ–Ω—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –Ω–∞ YouTube, –∫–æ–Ω—Ü–µ—Ä—Ç—ã –ø–æ –≤—Å–µ–π —Å—Ç—Ä–∞–Ω–µ, –º–æ—â–Ω—ã–µ –∫–æ–ª–ª–∞–±–æ—Ä–∞—Ü–∏–∏, –≤ —Ç–æ–º —á–∏—Å–ª–µ —Å –≥—Ä—É–ø–ø–æ–π Uma2rman, —Å—Ç–∞–≤—à–∏–µ –Ω–∞—Ä–æ–¥–Ω—ã–º–∏ –ø–µ—Å–Ω—è–º–∏ ‚Äî —ç—Ç–æ —Ç–æ–ª—å–∫–æ —á–∞—Å—Ç—å –ø–æ–±–µ–¥ –∑–∞ –¥–µ–≤—è—Ç–∏–ª–µ—Ç–Ω—é—é –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞.\n\n–û–Ω–∞ –ø–æ–µ—Ç –Ω–∞ ¬´–ö–≤–∞—Ä—Ç–∏—Ä–Ω–∏–∫–µ —É –ú–∞—Ä–≥—É–ª–∏—Å–∞¬ª –∏ ¬´–î–∏–∫–æ–π –ú—è—Ç–µ¬ª, YLETA–ô –∏ STEREOLETO –∏ –æ–¥–∏–Ω –∑–∞ –¥—Ä—É–≥–∏–º –ø–æ–∫–æ—Ä—è–µ—Ç —Ä–æ–∫-—Ñ–µ—Å—Ç–∏–≤–∞–ª–∏ –∏ —Å–Ω–∏–º–∞–µ—Ç –∫–ª–∏–ø—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–∏–≥—Ä—ã–≤–∞—é—Ç –Ω–∞–≥—Ä–∞–¥—ã –Ω–∞ –∫–æ–Ω–∫—É—Ä—Å–µ –∫–æ—Ä–æ—Ç–∫–æ–º–µ—Ç—Ä–∞–∂–µ–∫. –í –µ–µ –¥–∏—Å–∫–æ–≥—Ä–∞—Ñ–∏–∏ ‚Äì 5 EP, 7 –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã—Ö –∞–ª—å–±–æ–º–æ–≤ –∏ –±–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–Ω–≥–ª–æ–≤, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –º–Ω–æ–≥–æ –ª—é–±–≤–∏. –ü–æ—Ç–æ–º—É —á—Ç–æ –±–µ–∑ –ª—é–±–≤–∏ ‚Äî –∫ –º–∏—Ä—É –∏ —Å–ª—É—à–∞—Ç–µ–ª—é ‚Äî –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ —Ç–≤–æ—Ä–∏—Ç—å, –∫–∞–∫ –ï–∫–∞—Ç–µ—Ä–∏–Ω–∞ –Ø—à–Ω–∏–∫–æ–≤–∞: —è—Ä–∫–æ, –∂–∏–≤–æ, –æ—Å—Ç—Ä–æ –∏ –ø—Ä–µ–¥–µ–ª—å–Ω–æ —á–µ—Å—Ç–Ω–æ, —Å–æ–∑–¥–∞–≤–∞—è –Ω–µ –ø—Ä–æ—Å—Ç–æ –ø–µ—Å–Ω–∏ ‚Äî —Ü–µ–ª—ã–µ –º–∏—Ä—ã, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –∫–∞–∂–¥—ã–π –Ω–∞—Ö–æ–¥–∏—Ç —Å–µ–±—è.\n\n–í–Ω–∏–º–∞–Ω–∏–µ: –Ω—É–º–µ—Ä–∞—Ü–∏—è –∏ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –º–µ—Å—Ç –∑–∞ —Å—Ç–æ–ª–∞–º–∏ —è–≤–ª—è—é—Ç—Å—è —É—Å–ª–æ–≤–Ω—ã–º–∏, –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –Ω–æ–º–µ—Ä —Å—Ç–æ–ª–∞. –¶–µ–Ω–∞: 1200. –ê–¥—Ä–µ—Å: —É–ª. –î–∑–µ—Ä–∂–∏–Ω—Å–∫–æ–≥–æ, 31–í, –ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥. –ö–∞—Ç–µ–≥–æ—Ä–∏—è: –∫–æ–Ω—Ü–µ—Ä—Ç"

if __name__ == "__main__":
    model = LocalModel()
    promptManager = PromptManager()
    
    text1 = promptManager.prepare_prompt(textEvent)
    text2 = promptManager.prepare_prompt(textAds)

    
    
    forPrint = [
        text2,
text2,
text2,
text2,
text2,
text2,
text1,
text1,
text1,
text1,
text1,
text1,
text1,
text1,

        ]

    for i in forPrint:
        res = model.generate_structured_response(i, MODEL_NAME)
        print(json.dumps(res, ensure_ascii=False, indent=2))
    

